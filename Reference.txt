Reference.txt

Algorithms used

For this network analysis program, I looked at the Clique algorithm (Palla et al.) initially, because it looked fairly straightforward. However, after reading Ahn et al. a second time, I opted for the Edge Communities (link similarity) method instead, because it looked interesting and could have better output.

I used a combined Union-Find and simple binary tree method to do the merging of similarities. Each Edge has a parent leaf node. When two edges (of a link pair) are merged, their nodes are made the children of a new node representing a merge at that similarity value. When two communities are merged, the same thing is done, only on communities nodes rather than leaf notes. (I chose to use leaf nodes for some code simplicity.)

This implementation has some drawbacks, the biggest being memory usage. I had to increase the Java VM a bit to run the larger data sets, and optimize some of my code. However, I'm not sure the memory usage could be optimized very much, because both the pairs data and the Dendrogram get very big for large data sets.

I implemented a control on the threshold of the community merging. It simply stops merging when the similarity value drops below the threshold. Due to the way I aggregate communities' vertices in the top community Node, this control must be specified before building the Dendrogram.